{"version":3,"sources":["../../src/routes/rooms.js"],"names":["router","get","req","res","then","results","send","catch","err","post","room","body","result","user","console","log","name","rmResult","msg","student","_id","roomId","length","max_roommates","found","forEach","rm","insRes","params","id","roommates"],"mappings":"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","file":"rooms.js","sourcesContent":["import { Router } from 'express'\nimport { ObjectID } from 'mongodb'\nimport {\n  FindMany, FindOne, Update, Insert, Remove\n} from '../db'\n\nimport {\n  ROOMS,\n  ROOMMATES\n} from '../db/collections'\n\nconst router = Router()\n\nrouter.get('/', (req, res) => {\n  FindMany(ROOMS)\n  .then(results => (\n    res.send(results)\n  ))\n  .catch(err => (\n    res.send(err)\n  ))\n})\n\nrouter.post('/add', (req, res) => {\n  const room = req.body\n  Insert(ROOMS, room)\n  .then(result => (\n    res.send(result)\n  ))\n})\n\nrouter.post('/cancel', (req, res) => {\n  const user = req.body\n  console.log('user from cancel', user);\n  FindOne(ROOMMATES, { name: user.name })\n  .then(result => {\n    if(result.name) {\n      Remove(ROOMMATES, { name: user.name })\n      .then(rmResult => {\n        console.log('remove', rmResult)\n        res.send({ msg: \"Cancelled\"})\n      })\n    } else {\n      res.send({err: \"Does not exist. Cannot cancel\"})\n    }\n  })\n  .catch(err => {\n    res.send(err)\n  })\n})\n// Book a student to room\nrouter.post('/book', (req, res) => {\n  const student = req.body.student\n  FindOne(ROOMS, { _id: ObjectID(req.body.roomId) })\n  .then(result => {\n    FindMany(ROOMMATES, { roomId: req.body.roomId })\n    .then(rmResult => {\n      if(rmResult.length < result.max_roommates) {\n        let found = false\n        rmResult.forEach(rm => {\n          if(rm.name === req.body.student.name) {\n            found = true\n          }\n        })\n        if(!found) {\n          req.body.student['roomId'] = req.body.roomId\n          Insert(ROOMMATES, req.body.student)\n          .then(insRes => {\n            console.log('insert result', insRes);\n            res.send(insRes)\n          })\n        } else {\n          res.send({ err: \"You already booked this room\"})\n        }\n      } else {\n        res.send({ err: \"Fully booked\"})\n      }\n    })\n  })\n})\n\nrouter.get('/:id', (req, res) => {\n  FindOne(ROOMS, { _id: ObjectID(req.params.id) })\n  .then(result => {\n    FindMany(ROOMMATES, { roomId: req.params.id })\n    .then(rmResult => {\n      console.log('rmResult', rmResult, result);\n      res.send({room: result, roommates: rmResult})\n    })\n  })\n  .catch(err => {\n    res.send(err)\n  })\n})\n\nexport default router\n"]}