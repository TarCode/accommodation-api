{"version":3,"sources":["../../src/db/index.js"],"names":["FindMany","collection","query","then","db","Promise","resolve","reject","find","sort","createdAt","toArray","err","docs","FindOne","findOne","doc","Insert","data","insert","InsertMany","insertMany","ordered","Remove","remove","Update","args","findOneAndUpdate","$set","returnOriginal","value","catch","error","Upsert","upsert"],"mappings":"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","file":"index.js","sourcesContent":["import { mongo } from './db'\n\nexport const FindMany = (collection, query) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      db.collection(collection).find(query).sort({createdAt: 1}).toArray((err, docs) => {\n        if (err) reject(err)\n        resolve(docs)\n      })\n    })\n  })\n}\n\nexport const FindOne = (collection, query) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      db.collection(collection).findOne(query, (err, doc) => {\n        if (err) reject(err)\n        resolve(doc)\n      })\n    })\n  })\n}\n\nexport const Insert = (collection, data) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      db.collection(collection).insert(data, (err, docs) => {\n        if (!err) {\n          resolve(docs)\n        }\n        return reject(err);\n      })\n    })\n  })\n}\n\nexport const InsertMany = (collection, data) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      db.collection(collection).insertMany(data, { ordered: true }, (err, docs) => {\n        if (!err) {\n          resolve(docs)\n        }\n        return reject(err);\n      })\n    })\n  })\n}\n\nexport const Remove = (collection, query) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      db.collection(collection).remove(query, (err, doc) => {\n        if (!err) {\n          resolve(doc)\n        }\n        return reject(err);\n      })\n    })\n  })\n}\n\nexport const Update = (collection, query, args) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      return db.collection(collection).findOneAndUpdate(query, { $set: args }, { returnOriginal: false })\n      .then(({ value }) => resolve(value))\n      .catch(error => reject(err))\n    })\n  })\n}\n\nexport const Upsert = (collection, query, args) => {\n  return mongo.then(db => {\n    return new Promise((resolve, reject) => {\n      return db.collection(collection).findOneAndUpdate(query, { $set: args }, { upsert: true })\n      .then(({ value }) => resolve(value))\n      .catch(error => reject(err))\n    })\n  })\n}\n"]}